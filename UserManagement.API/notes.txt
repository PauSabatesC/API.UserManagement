-domain models ar anemic, so they should have all the assert validation logic of the model itself.
-dtos may be included and they might be in the application service layer, not in the domain layer.
-la interficie del repository en comptes de passar per parametres Guid passar T ja que en algunes databases no va el guid. https://www.c-sharpcorner.com/article/onion-architecture-in-asp-net-core-mvc/
-millorar el versioning
-look into token invalidation (i only do validation?)
-posar els Responses com aqui https://github.com/zkavtaskin/Domain-Driven-Design-Example/blob/master/eCommerce.WebService/Controllers/CartController.cs
-posar UserManager and JwtSettings DI as Interfaces of the Data.

---- authentication and authorization types:

.api key (per utilitzar rollo altres developers)
	- no es util per usuaris 

.https token (quan login es genera un token que es guarda en database i a les cookies)
	- consulta cada cop a database(amb redis es pot millorar temps. es mes utilitzat per sessions rollo carrito)
	- entrada a db per cada user
	. database compartida si varies instancies del servei
	+ can expire/refresh

.jwt token (token q es genera a partir de un secret key. utilitzat en api rest per verificar que el usuari que s'ha loguejat te permissos)
	+ cada client es guarda el token, res a databases
	+ menys accessos database
	+ can expire
	- el jwt conte 3 parts(header,payload,signature) pero esta codificat amb hash base64 per tant el payload pot ser llegit i no s'hi ha de posar informació delicada.

.identity .net (per gestionar rols i permissos)

.oauth (per donar permissos a una third app.)




----posar al readme----

Production ready API server for Authentication, authorization, and user management easy to integrate anywhere with anything. Also it's free, with all its features, forever.

Launch:
	(explicar docker build/run i com conectar bbdd)
Features:
	- Asynchronous login and registration.
	- Secure authentication and authorization.
	- JWT token.
	- Refresh tokens.
	- Claims and roles.
	- Admin endpoints for management.
	- Third party oauth services(twitter, google).
	- SDK for developers.
	- Onion architecture, easy to maintain/add new features.
	- Swagger documentation.
	- Requests validation.
	- Db tables to log users metadata.
	- Response caching.
	- Health checks.
	- Versioned API.
	(Future features)
	- AWS IAM authentication
	- Easier cloud deploy using Terraform and environment files.
	- Strong security tests and analysis.
	- MFA (Multi-factor authentication).
	- SSO (Single Sign On).

Exemples: https://fusionauth.io/ o https://auth0.com/




---Migration to Onion + DDD---

-UserManagement.Domain
	-Entities
	-Repository Interfaces
-UserManagement.Services
	-DTOs
	-Options
	-Extensions
	-Boundaries
-UserManagement.Infrastructure
	-Database
		-SQLServer
			-Migrations
-UserManagement.API
	-Controllers
		-v1
			-Contracts
				-Requests
				-Responses
				ApiRoutes.cs
	appsettings.json

