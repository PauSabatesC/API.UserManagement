
RUN:

-Development build
	- docker-compose -f docker-compose-debugEnv.yml build
	- docker-compose -f docker-compose-debugEnv.yml up
	- https://localhost:5001/swagger/index.html

-Production like build
	- docker-compose build
	- docker-compose up
	- https://localhost/swagger/index.html

todos:
-la interficie del repository en comptes de passar per parametres Guid passar T ja que en algunes databases no va el guid. https://www.c-sharpcorner.com/article/onion-architecture-in-asp-net-core-mvc/
-look into token invalidation (i only do validation?)
-posar els Responses com aqui https://github.com/zkavtaskin/Domain-Driven-Design-Example/blob/master/eCommerce.WebService/Controllers/CartController.cs
-on posar els try catch i on posar els logs
-move startup configure services to each layer.
-cache invalidation (aqui parlen https://github.com/jasontaylordev/CleanArchitecture/pull/110)
-la service layer hauria de tenir fluent validation també.
-transactions(rollbacks) in EF.
-integration/unit testing

---- authentication and authorization types:

.api key (per utilitzar rollo altres developers)
	- no es util per usuaris 

.session token (quan login es genera un token que es guarda en database i a les cookies)
	- consulta cada cop a database(amb redis es pot millorar temps. es mes utilitzat per sessions rollo carrito)
	- entrada a db per cada user
	. database compartida si varies instancies del servei
	+ can expire/refresh

.jwt token (token q es genera a partir de un secret key. utilitzat en api rest per verificar que el usuari que s'ha loguejat te permissos)
	+ cada client es guarda el token, res a databases
	+ menys accessos database
	+ can expire
	- el jwt conte 3 parts(header,payload,signature) pero esta codificat amb hash base64 per tant el payload pot ser llegit i no s'hi ha de posar informaci� delicada.

.identity .net (per gestionar rols i permissos)

.oauth (per donar permissos a una third app.)



---- middlewares (també anomenats filters a vegades ja que poden filtrar si algo entra a un controller o no al ser steps que s'executen abans)

Estan definits en la pipiline de startup IApplicationBuilder en el method configure
	-aspnet attribute middleware for jwt authentication
	-aspnet attribute middleware for authorization (claim/roles)
Pots crear middleware personalitzat heredant de IAsyncActionFilter i Attribute
El flow es que s'executa abans del controller, li dius next() al delegate i s'executa al controller i llavors tornaria al middleware i executaria el que
hi hagués després del next().
	- per exemple per la api key
	- també a les requests validations (on el middleware, el que hereda de IAsyncActionFilter, es el que fa model.valid de un context. Aquest context son els
								diferents validators amb els rulefor, que funciona ja que hereden de AbstractValidator<ModelAValidar>, és a dir que
								no s'executen per Attribute sino perque la query de la request esta associada a un AbstractValidator)
	- per fer la verificacio de la policy de enterprise email també es fa pero en aquest cas com que el atribut es: [Authorize(Policy = Policies.MustBeEnterpriseEmail)]
		doncs no hereda de IAsyncActionFilter sino de AuthorizationHandler.

Pero els resource filters no es un middleware, sino simplement es un parametre que afageixes a la query per dir que de la consulta nomes vols obtenir
aquell parametre (per exemple de users fas la query només de email) es com dir el select de la sql query.